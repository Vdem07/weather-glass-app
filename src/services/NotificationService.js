import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getCurrentWeather, getDailyForecast } from '../api/weather';
import * as Location from 'expo-location';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

class NotificationService {
  constructor() {
    this.todayNotificationTimer = null;
    this.tomorrowNotificationTimer = null;
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermissions() {
    try {
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async getCoordinates() {
    try {
      const saved = await AsyncStorage.getItem('savedCity');
      
      if (saved) {
        const coords = JSON.parse(saved);
        return { lat: coords.lat, lon: coords.lon };
      } else {
        const { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== 'granted') {
          throw new Error('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
        }

        const location = await Location.getCurrentPositionAsync({
          accuracy: Location.Accuracy.Balanced,
        });
        return { 
          lat: location.coords.latitude, 
          lon: location.coords.longitude 
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
      throw error;
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  async convertTemperature(temp) {
    try {
      const tempUnit = await AsyncStorage.getItem('unit') || 'metric';
      if (tempUnit === 'imperial') {
        return Math.round((temp * 9/5) + 32);
      }
      return Math.round(temp);
    } catch (error) {
      return Math.round(temp);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  async getTemperatureSymbol() {
    try {
      const tempUnit = await AsyncStorage.getItem('unit') || 'metric';
      return tempUnit === 'imperial' ? '¬∞F' : '¬∞C';
    } catch (error) {
      return '¬∞C';
    }
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ–≥–æ–¥–µ
  async createTodayNotification() {
    try {
      const coords = await this.getCoordinates();
      const weather = await getCurrentWeather(coords.lat, coords.lon);
      
      const temp = await this.convertTemperature(weather.main.temp);
      const tempSymbol = await this.getTemperatureSymbol();
      const description = weather.weather[0].description;
      const city = weather.name;
      
      const title = `üå§Ô∏è –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –≤ ${city}`;
      const body = `${temp}${tempSymbol}, ${description}. –í–ª–∞–∂–Ω–æ—Å—Ç—å ${weather.main.humidity}%`;

      await Notifications.scheduleNotificationAsync({
        content: {
          title,
          body,
          data: { type: 'today_weather' },
        },
        trigger: null, // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ
      });

      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ–≥–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ–≥–æ–¥–µ:', error);
    }
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–≥–æ–¥–µ
  async createTomorrowNotification() {
    try {
      const coords = await this.getCoordinates();
      const forecast = await getDailyForecast(coords.lat, coords.lon);
      
      if (forecast && forecast.length > 0) {
        const tomorrowWeather = forecast[0]; // –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        
        const dayTemp = await this.convertTemperature(tomorrowWeather.temp);
        const nightTemp = await this.convertTemperature(tomorrowWeather.nightTemp);
        const tempSymbol = await this.getTemperatureSymbol();
        
        const title = `üåÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞`;
        const body = `${dayTemp}${tempSymbol} –¥–Ω–µ–º, ${nightTemp}${tempSymbol} –Ω–æ—á—å—é. ${tomorrowWeather.description}`;

        await Notifications.scheduleNotificationAsync({
          content: {
            title,
            body,
            data: { type: 'tomorrow_weather' },
          },
          trigger: null, // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ
        });

        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–≥–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–≥–æ–¥–µ:', error);
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  calculateTimeUntilNext(timeString) {
    const [hours, minutes] = timeString.split(':').map(Number);
    const now = new Date();
    const targetTime = new Date();
    
    targetTime.setHours(hours, minutes, 0, 0);
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (targetTime <= now) {
      targetTime.setDate(targetTime.getDate() + 1);
    }
    
    return targetTime.getTime() - now.getTime();
  }

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ–≥–æ–¥—ã
  async startTodayNotificationTimer() {
    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (this.todayNotificationTimer) {
        clearTimeout(this.todayNotificationTimer);
      }

      const todayTime = await AsyncStorage.getItem('todayWeatherNotificationTime');
      const isEnabled = await AsyncStorage.getItem('todayWeatherNotificationEnabled');
      
      if (todayTime && isEnabled === 'true') {
        const delay = this.calculateTimeUntilNext(todayTime);
        
        console.log(`–¢–∞–π–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ–≥–æ–¥—ã: ${Math.round(delay / 1000 / 60)} –º–∏–Ω—É—Ç –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è`);
        
        this.todayNotificationTimer = setTimeout(async () => {
          await this.createTodayNotification();
          // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
          this.startTodayNotificationTimer();
        }, delay);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ–≥–æ–¥—ã:', error);
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–≥–æ–¥—ã
  async startTomorrowNotificationTimer() {
    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (this.tomorrowNotificationTimer) {
        clearTimeout(this.tomorrowNotificationTimer);
      }

      const tomorrowTime = await AsyncStorage.getItem('tomorrowWeatherNotificationTime');
      const isEnabled = await AsyncStorage.getItem('tomorrowWeatherNotificationEnabled');
      
      if (tomorrowTime && isEnabled === 'true') {
        const delay = this.calculateTimeUntilNext(tomorrowTime);
        
        console.log(`–¢–∞–π–º–µ—Ä –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–≥–æ–¥—ã: ${Math.round(delay / 1000 / 60)} –º–∏–Ω—É—Ç –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è`);
        
        this.tomorrowNotificationTimer = setTimeout(async () => {
          await this.createTomorrowNotification();
          // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
          this.startTomorrowNotificationTimer();
        }, delay);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–≥–æ–¥—ã:', error);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  async initialize() {
    try {
      const hasPermission = await this.requestPermissions();
      
      if (hasPermission) {
        await this.startTodayNotificationTimer();
        await this.startTomorrowNotificationTimer();
        console.log('–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.log('–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
  stopAllTimers() {
    if (this.todayNotificationTimer) {
      clearTimeout(this.todayNotificationTimer);
      this.todayNotificationTimer = null;
    }
    
    if (this.tomorrowNotificationTimer) {
      clearTimeout(this.tomorrowNotificationTimer);
      this.tomorrowNotificationTimer = null;
    }
    
    console.log('–í—Å–µ —Ç–∞–π–º–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–æ–≤ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
  async restartTimers() {
    this.stopAllTimers();
    await this.startTodayNotificationTimer();
    await this.startTomorrowNotificationTimer();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendTestNotification(type = 'today') {
    try {
      const hasPermission = await this.requestPermissions();
      if (!hasPermission) {
        throw new Error('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }

      if (type === 'today') {
        await this.createTodayNotification();
      } else {
        await this.createTomorrowNotification();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export default new NotificationService();